<?php
/*
Plugin Name: WebINK Connector 
Plugin URI: http://www.webink.com/wordpress
Description: Easy integration of WebINK fonts into WordPress
Version: 1.0.4
Author: WebINK
Author URI: http://www.webink.com
License: GPL2
*/



global $WebINK_db_version;
global $WebINK_wsdl;
global $WebINK_PluginPage;
global $wpdb;
define("TABLE_PREPEND", strtolower("WebINK"));
include('WebINK-static-lib.php');
$WebINK_db_version = "1.0.2";
$WebINK_wsdl = "http://acl.webink.com/ws/DrawerManager?wsdl";



//Activation Hooks
register_activation_hook(__FILE__,'WebINK_activate');
//register_deactivation_hook(__FILE__,'WebINK_deactivate'); 

// Actions and Filters
add_action('admin_menu', 'WebINK_add_pages');
add_action('admin_init', 'WebINK_admin_init' );
add_action('admin_head', 'buildAdminFontLinks');
add_action('wp_head', 'buildUserFontLinks');
add_action('wpmu_new_blog', 'WebINK_new_blog', 10, 6);

add_filter('tiny_mce_before_init', 'WebINK_mce_before_init');
add_filter("mce_buttons_3", "WebINK_add_more_buttons");
add_action('wp_enqueue_scripts', 'WebINK_selector_styles');
add_action('admin_head', 'buildSelectorCSSLink',20);
add_action('admin_notices', 'WebINK_admin_notice');

function WebINK_admin_notice(){
    
    if ( isset($_REQUEST['page']) == 'WebINK-Font-Settings-handle' ) 
	{
		if(syncCheckFonts()){
			echo '<div id="webINKSyncError" class="error">
				   <p><strong>WebINK Notice:</strong></p>
				   <p>Your WebINK Type Drawer Projects and/or Fonts have changed since you last refreshed them. </p>
				   <p>Please click on the "Refresh Project List" link below. </p>
				</div>';
			
		}
	}
	
}

function WebINK_selector_styles()  
{ 
  wp_register_style( 'WebINK-style', 
    plugin_dir_url(__FILE__).'WebINK-css.php?css=selector', 
    array(), 
    '20120208', 
    'all' );
 wp_enqueue_style( 'WebINK-style' );
 wp_enqueue_script('jquery');
}


function WebINK_admin_init(){
	
	register_setting( 'WebINK_account_settings', 'WebINK_account-settings', 'WebINK_account_settings_validate' );
	register_setting( 'WebINK_account_settings', 'WebINK_tinycss' );
	register_setting( 'WebINK_account_settings', 'WebINK_selectorcss' );
}


function WebINK_add_pages() {
	add_menu_page(__('WebINK','menu-WebINK'), __('WebINK','menu-WebINK'), 'manage_options', 'WebINK-Font-Settings-handle', 'WebINK_Font_Settings_page',plugins_url('webink-connector/img/wi-icon-16.png') );
}


function WebINK_Font_Settings_page() {
    include('WebINK-font-settings.php');
}


// Sanitize and validate input. Accepts an array, return a sanitized array.
function WebINK_account_settings_validate($input) {
	
	$input['email'] =  wp_filter_nohtml_kses($input['email']);
	$input['password'] =  wp_filter_nohtml_kses($input['password']);
	return $input;
}

/**
 * Show activation errors
 *
 * Takes an array of activation errors and loops them into a list for display in the UI
 * @param array $messages The array of messages that were generated by the dependency checking in the activation function
 * @return string The marked up list of messages for display
 */
function showActivationErrors($messages) {
    $message = "<ul>";

    foreach($messages as $errMessage) {
        $message .= "<li>$errMessage</li>";
    }

    $message .= "</ul>";

    return $message;
}

// Multisite network activation wrapper for WebINK_db_install()
function WebINK_activate($network_wide = false) {

	// Check for dependencies and fail if they are unmet
    $errors = array();

    // Plugin depends on the SoapClient class. TODO migrate to WP HTTP
    if(!class_exists("SoapClient")) {
        $errors[] = "WebINK Connector depends on SoapClient, which is not present in this environment";
    }

    // Plugin depends on cURL module. This will also be taken care of by migrating to WP HTTP
    if(!function_exists("curl_exec")) {
        $errors[] = "WebINK Connector depends on the cURL module, which is not present in this environment";
    }

    // Do not allow plugin installation to continue if dependencies are unmet.
    if(!empty($errors)) {
        die(showActivationErrors($errors));
    }

	global $wpdb;
	
	// check if it is a network activation - if so, run the activation function for each blog id
	if ($network_wide) {
		// Get all blog ids
		$blogids = $wpdb->get_col($wpdb->prepare("
			SELECT blog_id
			FROM $wpdb->blogs
			WHERE site_id = %d
			AND deleted = 0
			AND spam = 0
		", $wpdb->siteid));
		foreach ($blogids as $blog_id) {
			switch_to_blog($blog_id);
			WebINK_db_install();
		}
		restore_current_blog();
	} else {
		WebINK_db_install();
	}
	register_uninstall_hook( __FILE__, 'WebINK_deactivate' );
}

// Activation wrapper for new blog in multisite
function WebINK_new_blog($blog_id, $user_id, $domain, $path, $site_id, $meta) {
	global $wpdb;
	
	if (is_plugin_active_for_network('webink-connector/WebINK-plugin.php')) { //change this if filenames change
		switch_to_blog($blog_id);
		WebINK_db_install();
		restore_current_blog();
	}
}

function WebINK_db_install() {
	
	global $wpdb;
	global $WebINK_db_version;
	global $WebINK_wsdl;

	$sql ="CREATE  TABLE ".$wpdb->prefix . TABLE_PREPEND."_projects (
	GUID VARCHAR(36) NULL ,
	Name VARCHAR(245) NULL ,
	Enabled TINYINT NULL ,
	Deleted TINYINT NULL ,
	Hidden TINYINT NULL ,
	Empty TINYINT NULL,
	Referrers VARCHAR(245) NULL ,
	PRIMARY KEY (GUID) );";
	$wpdb->query($sql);
	
	$sql ="CREATE  TABLE ".$wpdb->prefix . TABLE_PREPEND."_fonts (
	GUID VARCHAR(36) NOT NULL ,
	Name VARCHAR(245) NOT NULL ,	
	Family VARCHAR(245) NULL ,
	PSName VARCHAR(245) NULL ,
	MasterGUID VARCHAR(36) NOT NULL ,
	PRIMARY KEY (GUID) );";
	$wpdb->query($sql);
	
	$sql ="CREATE  TABLE ".$wpdb->prefix . TABLE_PREPEND."_project_fonts (
	ProjectGUID VARCHAR(36) NOT NULL ,
	FontGUID VARCHAR(36) NOT NULL ,
	TinyMCE TINYINT(4) DEFAULT '0' ,
	Fallback VARCHAR(245) DEFAULT NULL ,
	Selector VARCHAR(245) DEFAULT NULL ,
	Exclude tinyint(4) DEFAULT '0',
	Weight varchar(10) DEFAULT NULL,
	Style varchar(10) DEFAULT NULL, 
	PRIMARY KEY (ProjectGUID,FontGUID) );";
	$wpdb->query($sql);
	
   add_option("WebINK_db_version", $WebINK_db_version);
   
}

// Multisite network deactivation wrapper for WebINK_db_delete()
function WebINK_deactivate($network_wide = false) {
	global $wpdb;
 
	if ($network_wide) {
		// Get all blog ids
		$blogids = $wpdb->get_col($wpdb->prepare("
			SELECT blog_id
			FROM $wpdb->blogs
			WHERE site_id = %d
			AND deleted = 0
			AND spam = 0
		", $wpdb->siteid));
		foreach ($blogids as $blog_id) {
			switch_to_blog($blog_id);
			WebINK_db_delete();
		}
		restore_current_blog();
	} else {
		WebINK_db_delete();	
	}
}

function WebINK_db_delete() {
	
	global $wpdb;
	global $WebINK_db_version;
	global $WebINK_wsdl;
	
	$sql ="DROP TABLE ".$wpdb->prefix . TABLE_PREPEND."_projects;";
	$wpdb->query($sql);
	
	$sql ="DROP TABLE ".$wpdb->prefix . TABLE_PREPEND."_fonts;";
	$wpdb->query($sql);
	
	$sql ="DROP TABLE ".$wpdb->prefix . TABLE_PREPEND."_project_fonts;";
	$wpdb->query($sql);
	
	unregister_setting( 'WebINK_account_settings', 'WebINK_account-settings', 'WebINK_account_settings_validate' );
	unregister_setting( 'WebINK_account_settings', 'WebINK_tinycss', 'sanitize_text_field' );
	unregister_setting( 'WebINK_account_settings', 'WebINK_selectorcss',  'sanitize_text_field' );
	delete_option("WebINK_db_version");
	delete_option("WebINK_account-settings");
	delete_option("WebINK_tinycss");
	delete_option("WebINK_selectorcss");
}


/////////////////////////
// TINYMCE STUFF
/////////////////////////

function WebINK_add_more_buttons($buttons) {
	 $buttons[] = 'hr';
	 $buttons[] = 'del';
	 $buttons[] = 'sub';
	 $buttons[] = 'sup';
	 $buttons[] = 'fontselect';
	 $buttons[] = 'fontsizeselect';
	 $buttons[] = 'cleanup';
	 $buttons[] = 'styleselect';
	 return $buttons;
}

function WebINK_mce_before_init($init_array)
{
	
	$init_array['content_css'] = plugin_dir_url(__FILE__)."WebINK-css.php?css=tinymce";
	
	$tinyMenuFonts = buildTinyMCEMenu();
	if($tinyMenuFonts != ""){
		$themeAdvancedFonts = array('theme_advanced_fonts'=> $tinyMenuFonts);
		$result = array_merge($themeAdvancedFonts, $init_array);
	}else{
		$result = $init_array;
	}
	return $result;
}


?>